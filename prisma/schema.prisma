generator client {
  provider = "prisma-client-js"
}

enum Study {
  ELSYS
  KYB
  OTHER
  NOTANSWERD
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuksjonsObjektType {
  AUKSJON
  SALG
  LIVE
}

enum Committee {
  NOTCOM
  VEVCOM
  HS
  FADDERSTYRET
  OMBUL
  LOCCOM
  CONTACTOR
  KIELDER
  PHAESTCOM
  SPORTOGSPILL
  DGR
  OV
  SOSCOM
  HEUTTECOM
  BRYGCOM
  BLAESTCOM
  LOPHTCOM
  OMEGAREVYEN
  PHINANSCOM
}

model AuksjonsObjekt {
  id              Int                 @id @default(autoincrement())
  name            String
  description     String
  committee       Committee @default(NOTCOM)
  type            AuksjonsObjektType  @default(AUKSJON)

  startPriceOre   Int      @map("startPrice")
  currentPriceOre Int
  stock           Int                 @default(1)

  finalSaleTime   DateTime @default(dbgenerated("TIMESTAMP '2025-03-21 01:00:00'"))
  currentSaleTime DateTime @default(dbgenerated("TIMESTAMP '2025-03-20 23:00:00'")) //DO not adjust for timezone

  approved        Boolean  @default(false)
  imageName       String   @default("default.jpeg")
  authorId        String? //Do not make required 
  author          User?    @relation(fields: [authorId], references: [id])
  bids            Bid[]
}

model Bid {
  bidId    Int      @id @default(autoincrement())
  priceOre Int      @map("price")
  bidDate  DateTime @default(now())

  bidder   User   @relation(fields: [bidderId], references: [id])
  bidderId String

  auctionObject AuksjonsObjekt @relation(fields: [auctionItemId], references: [id])
  auctionItemId Int
}

model Account {
  id                String @id @default(cuid())
  userId            String @map("user_id")
  type              String
  provider          String
  providerAccountId String @map("provider_account_id")

  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id               String           @id @default(cuid())
  studyCourse      Study            @default(NOTANSWERD)
  name             String
  email            String?          @unique
  emailVerified    DateTime?        @map("email_verified")
  image            String?
  accounts         Account[]
  sessions         Session[]
  isAdmin          Boolean          @default(false)
  auksjonsObjekter AuksjonsObjekt[] //relasjon mellom User og auksjonsobjekt. [] viser til at listen med objekter kan v√¶re tom
  bids             Bid[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}