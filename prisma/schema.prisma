generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuksjonsObjekt {
  id              Int      @id @default(autoincrement())
  name            String
  description     String
  startPriceOre   Int      @map("startPrice")
  currentPriceOre Int
  finalSaleTime   DateTime
  currentSaleTime DateTime
  approved        Boolean  @default(false)
  imageName       String   @default("default.jpeg")
  authorId        String?
  author          User?    @relation(fields: [authorId], references: [id])
  bids            Bid[]
}

model Bid {
  bidId         Int            @id @default(autoincrement())
  priceOre      Int            @map("price")
  bidDate       DateTime       @default(now())
  bidderId      String
  auctionItemId Int
  auctionObject AuksjonsObjekt @relation(fields: [auctionItemId], references: [id])
  bidder        User           @relation(fields: [bidderId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id               String           @id @default(cuid())
  email            String?          @unique
  emailVerified    DateTime?        @map("email_verified")
  image            String?
  isAdmin          Boolean          @default(false)
  auksjonsObjekter AuksjonsObjekt[]
  bids             Bid[]
  accounts         Account[]
  sessions         Session[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
